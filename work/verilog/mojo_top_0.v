/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [7:0] seg_one,
    output reg [7:0] seg_two,
    output reg [7:0] seg_three,
    output reg [7:0] seg_lives,
    output reg [15:0] grid,
    input r_button,
    input g_button,
    input b_button,
    input y_button,
    input up_button,
    input down_button,
    input left_button,
    input right_button,
    input conf_button
  );
  
  
  
  reg rst;
  
  reg [31:0] led_sig;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_buttondecoder_irq;
  wire [8-1:0] M_buttondecoder_value;
  reg [1-1:0] M_buttondecoder_reset;
  reg [1-1:0] M_buttondecoder_red;
  reg [1-1:0] M_buttondecoder_green;
  reg [1-1:0] M_buttondecoder_blue;
  reg [1-1:0] M_buttondecoder_yellow;
  reg [1-1:0] M_buttondecoder_up;
  reg [1-1:0] M_buttondecoder_down;
  reg [1-1:0] M_buttondecoder_left;
  reg [1-1:0] M_buttondecoder_right;
  reg [1-1:0] M_buttondecoder_confirm;
  buttoninputdecoder_2 buttondecoder (
    .clk(clk),
    .rst(rst),
    .reset(M_buttondecoder_reset),
    .red(M_buttondecoder_red),
    .green(M_buttondecoder_green),
    .blue(M_buttondecoder_blue),
    .yellow(M_buttondecoder_yellow),
    .up(M_buttondecoder_up),
    .down(M_buttondecoder_down),
    .left(M_buttondecoder_left),
    .right(M_buttondecoder_right),
    .confirm(M_buttondecoder_confirm),
    .irq(M_buttondecoder_irq),
    .value(M_buttondecoder_value)
  );
  wire [1-1:0] M_cpu_write;
  wire [1-1:0] M_cpu_read;
  wire [16-1:0] M_cpu_address;
  wire [1-1:0] M_cpu_buttonreset;
  reg [8-1:0] M_cpu_button;
  reg [1-1:0] M_cpu_irq;
  reg [26-1:0] M_cpu_din;
  cpu_3 cpu (
    .clk(clk),
    .rst(rst),
    .button(M_cpu_button),
    .irq(M_cpu_irq),
    .din(M_cpu_din),
    .write(M_cpu_write),
    .read(M_cpu_read),
    .address(M_cpu_address),
    .buttonreset(M_cpu_buttonreset)
  );
  wire [26-1:0] M_progROM_inst;
  reg [16-1:0] M_progROM_address;
  programRom_4 progROM (
    .clk(clk),
    .rst(rst),
    .address(M_progROM_address),
    .inst(M_progROM_inst)
  );
  
  wire [8-1:0] M_seg1_out;
  reg [4-1:0] M_seg1_in;
  seven_seg_5 seg1 (
    .in(M_seg1_in),
    .out(M_seg1_out)
  );
  
  wire [8-1:0] M_seg2_out;
  reg [4-1:0] M_seg2_in;
  seven_seg_5 seg2 (
    .in(M_seg2_in),
    .out(M_seg2_out)
  );
  
  wire [8-1:0] M_seg3_out;
  reg [4-1:0] M_seg3_in;
  seven_seg_5 seg3 (
    .in(M_seg3_in),
    .out(M_seg3_out)
  );
  
  wire [8-1:0] M_segL_out;
  reg [4-1:0] M_segL_in;
  seven_seg_5 segL (
    .in(M_segL_in),
    .out(M_segL_out)
  );
  
  wire [16-1:0] M_led_grid_out;
  reg [32-1:0] M_led_grid_in;
  led_grid_9 led_grid (
    .in(M_led_grid_in),
    .out(M_led_grid_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    led_sig = 32'h00000000;
    M_seg1_in = 4'h0;
    M_seg2_in = 4'h0;
    M_seg3_in = 4'h0;
    M_segL_in = 4'h0;
    M_led_grid_in = led_sig;
    grid = M_led_grid_out;
    seg_one = M_seg1_out;
    seg_two = M_seg2_out;
    seg_three = M_seg3_out;
    seg_lives = M_segL_out;
    M_buttondecoder_red = r_button;
    M_buttondecoder_green = g_button;
    M_buttondecoder_blue = b_button;
    M_buttondecoder_yellow = y_button;
    M_buttondecoder_up = up_button;
    M_buttondecoder_down = down_button;
    M_buttondecoder_left = left_button;
    M_buttondecoder_right = right_button;
    M_buttondecoder_confirm = conf_button;
    M_progROM_address = M_cpu_address;
    M_cpu_din = M_progROM_inst;
    M_cpu_irq = M_buttondecoder_irq;
    M_cpu_button = M_buttondecoder_value;
    M_buttondecoder_reset = M_cpu_buttonreset;
  end
endmodule
