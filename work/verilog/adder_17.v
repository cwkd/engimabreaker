/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_17 (
    input [7:0] a,
    input [7:0] b,
    input alufn,
    output reg [7:0] sum,
    output reg z,
    output reg n,
    output reg v
  );
  
  
  
  reg [7:0] xb;
  
  integer i;
  
  wire [1-1:0] M_fa0_sum;
  wire [1-1:0] M_fa0_cout;
  reg [1-1:0] M_fa0_a;
  reg [1-1:0] M_fa0_b;
  reg [1-1:0] M_fa0_cin;
  full_adder_22 fa0 (
    .a(M_fa0_a),
    .b(M_fa0_b),
    .cin(M_fa0_cin),
    .sum(M_fa0_sum),
    .cout(M_fa0_cout)
  );
  
  wire [1-1:0] M_fa1_sum;
  wire [1-1:0] M_fa1_cout;
  reg [1-1:0] M_fa1_a;
  reg [1-1:0] M_fa1_b;
  reg [1-1:0] M_fa1_cin;
  full_adder_22 fa1 (
    .a(M_fa1_a),
    .b(M_fa1_b),
    .cin(M_fa1_cin),
    .sum(M_fa1_sum),
    .cout(M_fa1_cout)
  );
  
  wire [1-1:0] M_fa2_sum;
  wire [1-1:0] M_fa2_cout;
  reg [1-1:0] M_fa2_a;
  reg [1-1:0] M_fa2_b;
  reg [1-1:0] M_fa2_cin;
  full_adder_22 fa2 (
    .a(M_fa2_a),
    .b(M_fa2_b),
    .cin(M_fa2_cin),
    .sum(M_fa2_sum),
    .cout(M_fa2_cout)
  );
  
  wire [1-1:0] M_fa3_sum;
  wire [1-1:0] M_fa3_cout;
  reg [1-1:0] M_fa3_a;
  reg [1-1:0] M_fa3_b;
  reg [1-1:0] M_fa3_cin;
  full_adder_22 fa3 (
    .a(M_fa3_a),
    .b(M_fa3_b),
    .cin(M_fa3_cin),
    .sum(M_fa3_sum),
    .cout(M_fa3_cout)
  );
  
  wire [1-1:0] M_fa4_sum;
  wire [1-1:0] M_fa4_cout;
  reg [1-1:0] M_fa4_a;
  reg [1-1:0] M_fa4_b;
  reg [1-1:0] M_fa4_cin;
  full_adder_22 fa4 (
    .a(M_fa4_a),
    .b(M_fa4_b),
    .cin(M_fa4_cin),
    .sum(M_fa4_sum),
    .cout(M_fa4_cout)
  );
  
  wire [1-1:0] M_fa5_sum;
  wire [1-1:0] M_fa5_cout;
  reg [1-1:0] M_fa5_a;
  reg [1-1:0] M_fa5_b;
  reg [1-1:0] M_fa5_cin;
  full_adder_22 fa5 (
    .a(M_fa5_a),
    .b(M_fa5_b),
    .cin(M_fa5_cin),
    .sum(M_fa5_sum),
    .cout(M_fa5_cout)
  );
  
  wire [1-1:0] M_fa6_sum;
  wire [1-1:0] M_fa6_cout;
  reg [1-1:0] M_fa6_a;
  reg [1-1:0] M_fa6_b;
  reg [1-1:0] M_fa6_cin;
  full_adder_22 fa6 (
    .a(M_fa6_a),
    .b(M_fa6_b),
    .cin(M_fa6_cin),
    .sum(M_fa6_sum),
    .cout(M_fa6_cout)
  );
  
  wire [1-1:0] M_fa7_sum;
  wire [1-1:0] M_fa7_cout;
  reg [1-1:0] M_fa7_a;
  reg [1-1:0] M_fa7_b;
  reg [1-1:0] M_fa7_cin;
  full_adder_22 fa7 (
    .a(M_fa7_a),
    .b(M_fa7_b),
    .cin(M_fa7_cin),
    .sum(M_fa7_sum),
    .cout(M_fa7_cout)
  );
  
  always @* begin
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      xb[(i)*1+0-:1] = b[(i)*1+0-:1] ^ alufn;
    end
    M_fa0_a = a[0+0-:1];
    M_fa0_b = xb[0+0-:1];
    M_fa0_cin = alufn;
    sum[0+0-:1] = M_fa0_sum;
    M_fa1_a = a[1+0-:1];
    M_fa1_b = xb[1+0-:1];
    M_fa1_cin = M_fa0_cout;
    sum[1+0-:1] = M_fa1_sum;
    M_fa2_a = a[2+0-:1];
    M_fa2_b = xb[2+0-:1];
    M_fa2_cin = M_fa1_cout;
    sum[2+0-:1] = M_fa2_sum;
    M_fa3_a = a[3+0-:1];
    M_fa3_b = xb[3+0-:1];
    M_fa3_cin = M_fa2_cout;
    sum[3+0-:1] = M_fa3_sum;
    M_fa4_a = a[4+0-:1];
    M_fa4_b = xb[4+0-:1];
    M_fa4_cin = M_fa3_cout;
    sum[4+0-:1] = M_fa4_sum;
    M_fa5_a = a[5+0-:1];
    M_fa5_b = xb[5+0-:1];
    M_fa5_cin = M_fa4_cout;
    sum[5+0-:1] = M_fa5_sum;
    M_fa6_a = a[6+0-:1];
    M_fa6_b = xb[6+0-:1];
    M_fa6_cin = M_fa5_cout;
    sum[6+0-:1] = M_fa6_sum;
    M_fa7_a = a[7+0-:1];
    M_fa7_b = xb[7+0-:1];
    M_fa7_cin = M_fa6_cout;
    sum[7+0-:1] = M_fa7_sum;
    n = M_fa7_sum;
    z = !(M_fa0_sum || M_fa1_sum || M_fa2_sum || M_fa3_sum || M_fa4_sum || M_fa5_sum || M_fa6_sum || M_fa7_sum);
    v = ((a[7+0-:1] && xb[7+0-:1] && ~M_fa7_sum) || (~a[7+0-:1] && ~xb[7+0-:1] && M_fa7_sum));
  end
endmodule
