/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mul_18 (
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] p
  );
  
  
  
  reg [63:0] x;
  
  reg [48:0] s;
  
  integer i;
  
  integer j;
  
  wire [1-1:0] M_fa00_sum;
  wire [1-1:0] M_fa00_cout;
  reg [1-1:0] M_fa00_a;
  reg [1-1:0] M_fa00_b;
  reg [1-1:0] M_fa00_cin;
  full_adder_22 fa00 (
    .a(M_fa00_a),
    .b(M_fa00_b),
    .cin(M_fa00_cin),
    .sum(M_fa00_sum),
    .cout(M_fa00_cout)
  );
  
  wire [1-1:0] M_fa01_sum;
  wire [1-1:0] M_fa01_cout;
  reg [1-1:0] M_fa01_a;
  reg [1-1:0] M_fa01_b;
  reg [1-1:0] M_fa01_cin;
  full_adder_22 fa01 (
    .a(M_fa01_a),
    .b(M_fa01_b),
    .cin(M_fa01_cin),
    .sum(M_fa01_sum),
    .cout(M_fa01_cout)
  );
  
  wire [1-1:0] M_fa02_sum;
  wire [1-1:0] M_fa02_cout;
  reg [1-1:0] M_fa02_a;
  reg [1-1:0] M_fa02_b;
  reg [1-1:0] M_fa02_cin;
  full_adder_22 fa02 (
    .a(M_fa02_a),
    .b(M_fa02_b),
    .cin(M_fa02_cin),
    .sum(M_fa02_sum),
    .cout(M_fa02_cout)
  );
  
  wire [1-1:0] M_fa03_sum;
  wire [1-1:0] M_fa03_cout;
  reg [1-1:0] M_fa03_a;
  reg [1-1:0] M_fa03_b;
  reg [1-1:0] M_fa03_cin;
  full_adder_22 fa03 (
    .a(M_fa03_a),
    .b(M_fa03_b),
    .cin(M_fa03_cin),
    .sum(M_fa03_sum),
    .cout(M_fa03_cout)
  );
  
  wire [1-1:0] M_fa04_sum;
  wire [1-1:0] M_fa04_cout;
  reg [1-1:0] M_fa04_a;
  reg [1-1:0] M_fa04_b;
  reg [1-1:0] M_fa04_cin;
  full_adder_22 fa04 (
    .a(M_fa04_a),
    .b(M_fa04_b),
    .cin(M_fa04_cin),
    .sum(M_fa04_sum),
    .cout(M_fa04_cout)
  );
  
  wire [1-1:0] M_fa05_sum;
  wire [1-1:0] M_fa05_cout;
  reg [1-1:0] M_fa05_a;
  reg [1-1:0] M_fa05_b;
  reg [1-1:0] M_fa05_cin;
  full_adder_22 fa05 (
    .a(M_fa05_a),
    .b(M_fa05_b),
    .cin(M_fa05_cin),
    .sum(M_fa05_sum),
    .cout(M_fa05_cout)
  );
  
  wire [1-1:0] M_fa06_sum;
  wire [1-1:0] M_fa06_cout;
  reg [1-1:0] M_fa06_a;
  reg [1-1:0] M_fa06_b;
  reg [1-1:0] M_fa06_cin;
  full_adder_22 fa06 (
    .a(M_fa06_a),
    .b(M_fa06_b),
    .cin(M_fa06_cin),
    .sum(M_fa06_sum),
    .cout(M_fa06_cout)
  );
  
  wire [1-1:0] M_fa10_sum;
  wire [1-1:0] M_fa10_cout;
  reg [1-1:0] M_fa10_a;
  reg [1-1:0] M_fa10_b;
  reg [1-1:0] M_fa10_cin;
  full_adder_22 fa10 (
    .a(M_fa10_a),
    .b(M_fa10_b),
    .cin(M_fa10_cin),
    .sum(M_fa10_sum),
    .cout(M_fa10_cout)
  );
  
  wire [1-1:0] M_fa11_sum;
  wire [1-1:0] M_fa11_cout;
  reg [1-1:0] M_fa11_a;
  reg [1-1:0] M_fa11_b;
  reg [1-1:0] M_fa11_cin;
  full_adder_22 fa11 (
    .a(M_fa11_a),
    .b(M_fa11_b),
    .cin(M_fa11_cin),
    .sum(M_fa11_sum),
    .cout(M_fa11_cout)
  );
  
  wire [1-1:0] M_fa12_sum;
  wire [1-1:0] M_fa12_cout;
  reg [1-1:0] M_fa12_a;
  reg [1-1:0] M_fa12_b;
  reg [1-1:0] M_fa12_cin;
  full_adder_22 fa12 (
    .a(M_fa12_a),
    .b(M_fa12_b),
    .cin(M_fa12_cin),
    .sum(M_fa12_sum),
    .cout(M_fa12_cout)
  );
  
  wire [1-1:0] M_fa13_sum;
  wire [1-1:0] M_fa13_cout;
  reg [1-1:0] M_fa13_a;
  reg [1-1:0] M_fa13_b;
  reg [1-1:0] M_fa13_cin;
  full_adder_22 fa13 (
    .a(M_fa13_a),
    .b(M_fa13_b),
    .cin(M_fa13_cin),
    .sum(M_fa13_sum),
    .cout(M_fa13_cout)
  );
  
  wire [1-1:0] M_fa14_sum;
  wire [1-1:0] M_fa14_cout;
  reg [1-1:0] M_fa14_a;
  reg [1-1:0] M_fa14_b;
  reg [1-1:0] M_fa14_cin;
  full_adder_22 fa14 (
    .a(M_fa14_a),
    .b(M_fa14_b),
    .cin(M_fa14_cin),
    .sum(M_fa14_sum),
    .cout(M_fa14_cout)
  );
  
  wire [1-1:0] M_fa15_sum;
  wire [1-1:0] M_fa15_cout;
  reg [1-1:0] M_fa15_a;
  reg [1-1:0] M_fa15_b;
  reg [1-1:0] M_fa15_cin;
  full_adder_22 fa15 (
    .a(M_fa15_a),
    .b(M_fa15_b),
    .cin(M_fa15_cin),
    .sum(M_fa15_sum),
    .cout(M_fa15_cout)
  );
  
  wire [1-1:0] M_fa20_sum;
  wire [1-1:0] M_fa20_cout;
  reg [1-1:0] M_fa20_a;
  reg [1-1:0] M_fa20_b;
  reg [1-1:0] M_fa20_cin;
  full_adder_22 fa20 (
    .a(M_fa20_a),
    .b(M_fa20_b),
    .cin(M_fa20_cin),
    .sum(M_fa20_sum),
    .cout(M_fa20_cout)
  );
  
  wire [1-1:0] M_fa21_sum;
  wire [1-1:0] M_fa21_cout;
  reg [1-1:0] M_fa21_a;
  reg [1-1:0] M_fa21_b;
  reg [1-1:0] M_fa21_cin;
  full_adder_22 fa21 (
    .a(M_fa21_a),
    .b(M_fa21_b),
    .cin(M_fa21_cin),
    .sum(M_fa21_sum),
    .cout(M_fa21_cout)
  );
  
  wire [1-1:0] M_fa22_sum;
  wire [1-1:0] M_fa22_cout;
  reg [1-1:0] M_fa22_a;
  reg [1-1:0] M_fa22_b;
  reg [1-1:0] M_fa22_cin;
  full_adder_22 fa22 (
    .a(M_fa22_a),
    .b(M_fa22_b),
    .cin(M_fa22_cin),
    .sum(M_fa22_sum),
    .cout(M_fa22_cout)
  );
  
  wire [1-1:0] M_fa23_sum;
  wire [1-1:0] M_fa23_cout;
  reg [1-1:0] M_fa23_a;
  reg [1-1:0] M_fa23_b;
  reg [1-1:0] M_fa23_cin;
  full_adder_22 fa23 (
    .a(M_fa23_a),
    .b(M_fa23_b),
    .cin(M_fa23_cin),
    .sum(M_fa23_sum),
    .cout(M_fa23_cout)
  );
  
  wire [1-1:0] M_fa24_sum;
  wire [1-1:0] M_fa24_cout;
  reg [1-1:0] M_fa24_a;
  reg [1-1:0] M_fa24_b;
  reg [1-1:0] M_fa24_cin;
  full_adder_22 fa24 (
    .a(M_fa24_a),
    .b(M_fa24_b),
    .cin(M_fa24_cin),
    .sum(M_fa24_sum),
    .cout(M_fa24_cout)
  );
  
  wire [1-1:0] M_fa30_sum;
  wire [1-1:0] M_fa30_cout;
  reg [1-1:0] M_fa30_a;
  reg [1-1:0] M_fa30_b;
  reg [1-1:0] M_fa30_cin;
  full_adder_22 fa30 (
    .a(M_fa30_a),
    .b(M_fa30_b),
    .cin(M_fa30_cin),
    .sum(M_fa30_sum),
    .cout(M_fa30_cout)
  );
  
  wire [1-1:0] M_fa31_sum;
  wire [1-1:0] M_fa31_cout;
  reg [1-1:0] M_fa31_a;
  reg [1-1:0] M_fa31_b;
  reg [1-1:0] M_fa31_cin;
  full_adder_22 fa31 (
    .a(M_fa31_a),
    .b(M_fa31_b),
    .cin(M_fa31_cin),
    .sum(M_fa31_sum),
    .cout(M_fa31_cout)
  );
  
  wire [1-1:0] M_fa32_sum;
  wire [1-1:0] M_fa32_cout;
  reg [1-1:0] M_fa32_a;
  reg [1-1:0] M_fa32_b;
  reg [1-1:0] M_fa32_cin;
  full_adder_22 fa32 (
    .a(M_fa32_a),
    .b(M_fa32_b),
    .cin(M_fa32_cin),
    .sum(M_fa32_sum),
    .cout(M_fa32_cout)
  );
  
  wire [1-1:0] M_fa33_sum;
  wire [1-1:0] M_fa33_cout;
  reg [1-1:0] M_fa33_a;
  reg [1-1:0] M_fa33_b;
  reg [1-1:0] M_fa33_cin;
  full_adder_22 fa33 (
    .a(M_fa33_a),
    .b(M_fa33_b),
    .cin(M_fa33_cin),
    .sum(M_fa33_sum),
    .cout(M_fa33_cout)
  );
  
  wire [1-1:0] M_fa40_sum;
  wire [1-1:0] M_fa40_cout;
  reg [1-1:0] M_fa40_a;
  reg [1-1:0] M_fa40_b;
  reg [1-1:0] M_fa40_cin;
  full_adder_22 fa40 (
    .a(M_fa40_a),
    .b(M_fa40_b),
    .cin(M_fa40_cin),
    .sum(M_fa40_sum),
    .cout(M_fa40_cout)
  );
  
  wire [1-1:0] M_fa41_sum;
  wire [1-1:0] M_fa41_cout;
  reg [1-1:0] M_fa41_a;
  reg [1-1:0] M_fa41_b;
  reg [1-1:0] M_fa41_cin;
  full_adder_22 fa41 (
    .a(M_fa41_a),
    .b(M_fa41_b),
    .cin(M_fa41_cin),
    .sum(M_fa41_sum),
    .cout(M_fa41_cout)
  );
  
  wire [1-1:0] M_fa42_sum;
  wire [1-1:0] M_fa42_cout;
  reg [1-1:0] M_fa42_a;
  reg [1-1:0] M_fa42_b;
  reg [1-1:0] M_fa42_cin;
  full_adder_22 fa42 (
    .a(M_fa42_a),
    .b(M_fa42_b),
    .cin(M_fa42_cin),
    .sum(M_fa42_sum),
    .cout(M_fa42_cout)
  );
  
  wire [1-1:0] M_fa50_sum;
  wire [1-1:0] M_fa50_cout;
  reg [1-1:0] M_fa50_a;
  reg [1-1:0] M_fa50_b;
  reg [1-1:0] M_fa50_cin;
  full_adder_22 fa50 (
    .a(M_fa50_a),
    .b(M_fa50_b),
    .cin(M_fa50_cin),
    .sum(M_fa50_sum),
    .cout(M_fa50_cout)
  );
  
  wire [1-1:0] M_fa51_sum;
  wire [1-1:0] M_fa51_cout;
  reg [1-1:0] M_fa51_a;
  reg [1-1:0] M_fa51_b;
  reg [1-1:0] M_fa51_cin;
  full_adder_22 fa51 (
    .a(M_fa51_a),
    .b(M_fa51_b),
    .cin(M_fa51_cin),
    .sum(M_fa51_sum),
    .cout(M_fa51_cout)
  );
  
  wire [1-1:0] M_fa60_sum;
  wire [1-1:0] M_fa60_cout;
  reg [1-1:0] M_fa60_a;
  reg [1-1:0] M_fa60_b;
  reg [1-1:0] M_fa60_cin;
  full_adder_22 fa60 (
    .a(M_fa60_a),
    .b(M_fa60_b),
    .cin(M_fa60_cin),
    .sum(M_fa60_sum),
    .cout(M_fa60_cout)
  );
  
  always @* begin
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      for (j = 1'h0; j < 4'h8; j = j + 1) begin
        x[(i)*8+(j)*1+0-:1] = a[(j)*1+0-:1] && b[(i)*1+0-:1];
      end
    end
    p[0+0-:1] = x[0+0+0-:1];
    M_fa00_a = x[0+1+0-:1];
    M_fa00_b = x[8+0+0-:1];
    M_fa00_cin = 1'h0;
    s[0+0+0-:1] = M_fa00_sum;
    M_fa01_a = x[0+2+0-:1];
    M_fa01_b = x[8+1+0-:1];
    M_fa01_cin = M_fa00_cout;
    s[0+1+0-:1] = M_fa01_sum;
    M_fa02_a = x[0+3+0-:1];
    M_fa02_b = x[8+2+0-:1];
    M_fa02_cin = M_fa01_cout;
    s[0+2+0-:1] = M_fa02_sum;
    M_fa03_a = x[0+4+0-:1];
    M_fa03_b = x[8+3+0-:1];
    M_fa03_cin = M_fa02_cout;
    s[0+3+0-:1] = M_fa03_sum;
    M_fa04_a = x[0+5+0-:1];
    M_fa04_b = x[8+4+0-:1];
    M_fa04_cin = M_fa03_cout;
    s[0+4+0-:1] = M_fa04_sum;
    M_fa05_a = x[0+6+0-:1];
    M_fa05_b = x[8+5+0-:1];
    M_fa05_cin = M_fa04_cout;
    s[0+5+0-:1] = M_fa05_sum;
    M_fa06_a = x[0+7+0-:1];
    M_fa06_b = x[8+6+0-:1];
    M_fa06_cin = M_fa05_cout;
    s[0+6+0-:1] = M_fa06_sum;
    p[1+0-:1] = s[0+0+0-:1];
    M_fa10_a = x[16+0+0-:1];
    M_fa10_b = s[0+1+0-:1];
    M_fa10_cin = 1'h0;
    s[7+0+0-:1] = M_fa10_sum;
    M_fa11_a = x[16+1+0-:1];
    M_fa11_b = s[0+2+0-:1];
    M_fa11_cin = M_fa10_cout;
    s[7+1+0-:1] = M_fa11_sum;
    M_fa12_a = x[16+2+0-:1];
    M_fa12_b = s[0+3+0-:1];
    M_fa12_cin = M_fa11_cout;
    s[7+2+0-:1] = M_fa12_sum;
    M_fa13_a = x[16+3+0-:1];
    M_fa13_b = s[0+4+0-:1];
    M_fa13_cin = M_fa12_cout;
    s[7+3+0-:1] = M_fa13_sum;
    M_fa14_a = x[16+4+0-:1];
    M_fa14_b = s[0+5+0-:1];
    M_fa14_cin = M_fa13_cout;
    s[7+4+0-:1] = M_fa14_sum;
    M_fa15_a = x[16+5+0-:1];
    M_fa15_b = s[0+6+0-:1];
    M_fa15_cin = M_fa14_cout;
    s[7+5+0-:1] = M_fa15_sum;
    p[2+0-:1] = s[7+0+0-:1];
    M_fa20_a = x[24+0+0-:1];
    M_fa20_b = s[7+1+0-:1];
    M_fa20_cin = 1'h0;
    s[14+0+0-:1] = M_fa20_sum;
    M_fa21_a = x[24+1+0-:1];
    M_fa21_b = s[7+2+0-:1];
    M_fa21_cin = M_fa20_cout;
    s[14+1+0-:1] = M_fa21_sum;
    M_fa22_a = x[24+2+0-:1];
    M_fa22_b = s[7+3+0-:1];
    M_fa22_cin = M_fa21_cout;
    s[14+2+0-:1] = M_fa22_sum;
    M_fa23_a = x[24+3+0-:1];
    M_fa23_b = s[7+4+0-:1];
    M_fa23_cin = M_fa22_cout;
    s[14+3+0-:1] = M_fa23_sum;
    M_fa24_a = x[24+4+0-:1];
    M_fa24_b = s[7+5+0-:1];
    M_fa24_cin = M_fa23_cout;
    s[14+4+0-:1] = M_fa24_sum;
    p[3+0-:1] = s[14+0+0-:1];
    M_fa30_a = x[32+0+0-:1];
    M_fa30_b = s[14+1+0-:1];
    M_fa30_cin = 1'h0;
    s[21+0+0-:1] = M_fa30_sum;
    M_fa31_a = x[32+1+0-:1];
    M_fa31_b = s[14+2+0-:1];
    M_fa31_cin = M_fa30_cout;
    s[21+1+0-:1] = M_fa31_sum;
    M_fa32_a = x[32+2+0-:1];
    M_fa32_b = s[14+3+0-:1];
    M_fa32_cin = M_fa31_cout;
    s[21+2+0-:1] = M_fa32_sum;
    M_fa33_a = x[32+3+0-:1];
    M_fa33_b = s[14+4+0-:1];
    M_fa33_cin = M_fa32_cout;
    s[21+3+0-:1] = M_fa33_sum;
    p[4+0-:1] = s[21+0+0-:1];
    M_fa40_a = x[40+0+0-:1];
    M_fa40_b = s[21+1+0-:1];
    M_fa40_cin = 1'h0;
    s[28+0+0-:1] = M_fa40_sum;
    M_fa41_a = x[40+1+0-:1];
    M_fa41_b = s[21+2+0-:1];
    M_fa41_cin = M_fa40_cout;
    s[28+1+0-:1] = M_fa41_sum;
    M_fa42_a = x[40+2+0-:1];
    M_fa42_b = s[21+3+0-:1];
    M_fa42_cin = M_fa41_cout;
    s[28+2+0-:1] = M_fa42_sum;
    p[5+0-:1] = s[28+0+0-:1];
    M_fa50_a = x[48+0+0-:1];
    M_fa50_b = s[28+1+0-:1];
    M_fa50_cin = 1'h0;
    s[35+0+0-:1] = M_fa50_sum;
    M_fa51_a = x[48+1+0-:1];
    M_fa51_b = s[28+2+0-:1];
    M_fa51_cin = M_fa50_cout;
    s[35+1+0-:1] = M_fa51_sum;
    p[6+0-:1] = s[35+0+0-:1];
    M_fa60_a = x[56+0+0-:1];
    M_fa60_b = s[35+1+0-:1];
    M_fa60_cin = 1'h0;
    s[42+0+0-:1] = M_fa60_sum;
    p[7+0-:1] = s[42+0+0-:1];
  end
endmodule
