/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cpu_3 (
    input clk,
    input rst,
    input [7:0] button,
    input irq,
    output reg write,
    output reg read,
    output reg [15:0] address,
    output reg buttonreset,
    input [25:0] din
  );
  
  
  
  wire [32-1:0] M_regfile_led;
  wire [32-1:0] M_regfile_seven_seg;
  wire [8-1:0] M_regfile_bulls;
  wire [8-1:0] M_regfile_cows;
  wire [8-1:0] M_regfile_rd1;
  wire [8-1:0] M_regfile_rd2;
  wire [1-1:0] M_regfile_z;
  reg [8-1:0] M_regfile_button;
  reg [6-1:0] M_regfile_ra1;
  reg [6-1:0] M_regfile_ra2;
  reg [6-1:0] M_regfile_wa;
  reg [8-1:0] M_regfile_wd;
  reg [1-1:0] M_regfile_we;
  regfile_10 regfile (
    .clk(clk),
    .rst(rst),
    .button(M_regfile_button),
    .ra1(M_regfile_ra1),
    .ra2(M_regfile_ra2),
    .wa(M_regfile_wa),
    .wd(M_regfile_wd),
    .we(M_regfile_we),
    .led(M_regfile_led),
    .seven_seg(M_regfile_seven_seg),
    .bulls(M_regfile_bulls),
    .cows(M_regfile_cows),
    .rd1(M_regfile_rd1),
    .rd2(M_regfile_rd2),
    .z(M_regfile_z)
  );
  reg [15:0] M_pc_d, M_pc_q = 1'h0;
  
  wire [1-1:0] M_controllogic_werf;
  wire [3-1:0] M_controllogic_pcsel;
  wire [1-1:0] M_controllogic_wasel;
  wire [1-1:0] M_controllogic_asel;
  wire [1-1:0] M_controllogic_bsel;
  wire [6-1:0] M_controllogic_alufn;
  wire [1-1:0] M_controllogic_wdsel;
  wire [1-1:0] M_controllogic_ra2sel;
  reg [6-1:0] M_controllogic_opcode;
  controllogic_11 controllogic (
    .opcode(M_controllogic_opcode),
    .werf(M_controllogic_werf),
    .pcsel(M_controllogic_pcsel),
    .wasel(M_controllogic_wasel),
    .asel(M_controllogic_asel),
    .bsel(M_controllogic_bsel),
    .alufn(M_controllogic_alufn),
    .wdsel(M_controllogic_wdsel),
    .ra2sel(M_controllogic_ra2sel)
  );
  
  wire [8-1:0] M_alu_alu;
  wire [3-1:0] M_alu_test;
  wire [1-1:0] M_alu_cout;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  reg [1-1:0] M_alu_cin;
  alu8_12 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .cin(M_alu_cin),
    .alu(M_alu_alu),
    .test(M_alu_test),
    .cout(M_alu_cout)
  );
  
  reg [7:0] pageNumber;
  
  reg [7:0] localAddress;
  
  reg [5:0] opcode;
  
  reg [5:0] dest;
  
  reg [5:0] op1;
  
  reg [5:0] op2;
  
  reg [7:0] literal;
  
  reg [5:0] ra2;
  
  reg [7:0] rd1;
  
  reg [7:0] rd2;
  
  reg [7:0] adata;
  
  reg [7:0] bdata;
  
  reg [7:0] wd;
  
  reg werf;
  
  reg ra2sel;
  
  reg [5:0] alufn;
  
  reg z;
  
  reg bsel;
  
  reg [2:0] xpcsel;
  
  always @* begin
    M_pc_d = M_pc_q;
    
    write = 1'h0;
    read = 1'h0;
    buttonreset = 1'h0;
    address = M_pc_q;
    opcode = din[20+5-:6];
    dest = din[14+5-:6];
    op1 = din[8+5-:6];
    op2 = din[2+5-:6];
    literal = din[0+7-:8];
    M_controllogic_opcode = opcode;
    alufn = M_controllogic_alufn;
    werf = M_controllogic_werf;
    bsel = M_controllogic_bsel;
    xpcsel = M_controllogic_pcsel;
    ra2sel = M_controllogic_ra2sel;
    wd = M_alu_alu;
    M_alu_cin = 1'h0;
    M_alu_alufn = alufn;
    if (ra2sel == 1'h1) begin
      ra2 = dest;
    end else begin
      ra2 = op2;
    end
    M_regfile_button = button;
    M_regfile_ra1 = op1;
    M_regfile_ra2 = ra2;
    rd1 = M_regfile_rd1;
    rd2 = M_regfile_rd2;
    z = M_regfile_z;
    M_regfile_wa = dest;
    M_regfile_we = werf;
    adata = rd1;
    bdata = rd2;
    if (bsel == 1'h1) begin
      bdata = literal;
    end
    M_alu_a = adata;
    M_alu_b = bdata;
    M_regfile_wd = wd;
    if (opcode == 6'h01) begin
      buttonreset = 1'h1;
    end
    if (opcode == 6'h1d) begin
      if (z == 1'h1) begin
        localAddress = literal;
        pageNumber = rd2;
      end else begin
        localAddress = M_pc_q[0+7-:8] + 1'h1;
        pageNumber = M_pc_q[8+7-:8];
      end
    end else begin
      if (opcode == 6'h1e) begin
        if (z == 1'h0) begin
          localAddress = literal;
          pageNumber = rd2;
        end else begin
          localAddress = M_pc_q[0+7-:8] + 1'h1;
          pageNumber = M_pc_q[8+7-:8];
        end
      end else begin
        if (opcode == 6'h1b) begin
          localAddress = literal;
          pageNumber = rd2;
        end else begin
          if (opcode == 6'h02) begin
            localAddress = rd1;
            pageNumber = rd2;
          end else begin
            if (opcode == 6'h03) begin
              localAddress = rd2;
              pageNumber = literal;
            end else begin
              localAddress = M_pc_q[0+7-:8] + 1'h1;
              pageNumber = M_pc_q[8+7-:8];
            end
          end
        end
      end
    end
    M_pc_d[0+7-:8] = localAddress;
    M_pc_d[8+7-:8] = pageNumber;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_pc_q <= 1'h0;
    end else begin
      M_pc_q <= M_pc_d;
    end
  end
  
endmodule
