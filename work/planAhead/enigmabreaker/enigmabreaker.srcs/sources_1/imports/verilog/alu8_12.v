/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu8_12 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] alu,
    output reg [2:0] test,
    input cin,
    output reg cout
  );
  
  
  
  wire [8-1:0] M_arith_out;
  wire [1-1:0] M_arith_z;
  wire [1-1:0] M_arith_n;
  wire [1-1:0] M_arith_v;
  reg [8-1:0] M_arith_a;
  reg [8-1:0] M_arith_b;
  reg [2-1:0] M_arith_alufn;
  arith8_13 arith (
    .a(M_arith_a),
    .b(M_arith_b),
    .alufn(M_arith_alufn),
    .out(M_arith_out),
    .z(M_arith_z),
    .n(M_arith_n),
    .v(M_arith_v)
  );
  
  wire [8-1:0] M_compare_cmp;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_n;
  reg [1-1:0] M_compare_v;
  reg [2-1:0] M_compare_alufn;
  compare8_14 compare (
    .z(M_compare_z),
    .n(M_compare_n),
    .v(M_compare_v),
    .alufn(M_compare_alufn),
    .cmp(M_compare_cmp)
  );
  
  wire [8-1:0] M_boole_boole;
  reg [8-1:0] M_boole_a;
  reg [8-1:0] M_boole_b;
  reg [4-1:0] M_boole_alufn;
  boole8_15 boole (
    .a(M_boole_a),
    .b(M_boole_b),
    .alufn(M_boole_alufn),
    .boole(M_boole_boole)
  );
  
  wire [8-1:0] M_shift_out;
  wire [1-1:0] M_shift_cout;
  reg [8-1:0] M_shift_a;
  reg [3-1:0] M_shift_b;
  reg [4-1:0] M_shift_alufn;
  reg [1-1:0] M_shift_cin;
  shift_with_rotate_16 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .cin(M_shift_cin),
    .out(M_shift_out),
    .cout(M_shift_cout)
  );
  
  reg [31:0] out;
  
  always @* begin
    M_arith_a = a;
    M_arith_b = b;
    M_arith_alufn = alufn[0+1-:2];
    out[0+7-:8] = M_arith_out;
    M_boole_a = a;
    M_boole_b = b;
    M_boole_alufn = alufn[0+3-:4];
    out[8+7-:8] = M_boole_boole;
    M_shift_a = a;
    M_shift_b = b[0+2-:3];
    M_shift_alufn = alufn[0+3-:4];
    out[16+7-:8] = M_shift_out;
    M_shift_cin = cin;
    M_compare_z = M_arith_z;
    M_compare_v = M_arith_v;
    M_compare_n = M_arith_n;
    M_compare_alufn = alufn[1+1-:2];
    out[24+7-:8] = M_compare_cmp;
    test[2+0-:1] = M_arith_z;
    test[1+0-:1] = M_arith_v;
    test[0+0-:1] = M_arith_n;
    cout = 1'h0;
    if (alufn[4+1-:2] == 2'h0) begin
      alu = out[0+7-:8];
    end else begin
      if (alufn[4+1-:2] == 2'h1) begin
        alu = out[8+7-:8];
      end else begin
        if (alufn[4+1-:2] == 2'h2) begin
          alu = out[16+7-:8];
          cout = M_shift_cout;
        end else begin
          if (alufn[4+1-:2] == 2'h3) begin
            alu = out[24+7-:8];
          end else begin
            alu = 1'h0;
          end
        end
      end
    end
  end
endmodule
