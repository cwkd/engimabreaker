global Reg {
  
  const R0  = 6h00;  // default to register for function return
  const R1  = 6h01;
  const R2  = 6h02;
  const R3  = 6h03;
  const R4  = 6h04;
  const R5  = 6h05;
  const R6  = 6h06;
  const R7  = 6h07;
  
  const R8  = 6h08; // original string[0]
  const R9  = 6h09; // original string[1]
  const R10 = 6h0A; // original string[2]
  const R11 = 6h0B; // original string[3]
  const R12 = 6h0C; // original pos[0]
  const R13 = 6h0D; // original pos[1]
  const R14 = 6h0E; // original pos[2]
  const R15 = 6h0F; // original config[0]
  
  const R16 = 6h10; // original config[1]
  const R17 = 6h11; // original config[2]
  const R18 = 6h12; // encoded output[0]
  const R19 = 6h13; // encoded output[1]
  const R20 = 6h14; // encoded output[2]
  const R21 = 6h15; // encoded output[3]
  const R22 = 6h16; // guess pos[0]
  const R23 = 6h17; // guess pos[1]
  
  const R24 = 6h18; // guess pos[2]
  const R25 = 6h19; // candidate[0]
  const R26 = 6h1A; // candidate[1]
  const R27 = 6h1B; // candidate[2]
  const R28 = 6h1C; // candidate[3]
  const R29 = 6h1D; // enigma return value
  const R30 = 6h1E; // rotor state[0]
  const R31 = 6h1F; // rotor state[1]
  
  const R32 = 6h20; // rotor state[2]
  const R33 = 6h21; // calculated offset[0]
  const R34 = 6h22; // calculated offset[1]
  const R35 = 6h23; // calculated offset[2]
  const R36 = 6h24; // atemp[0]
  const R37 = 6h25; // atemp[1]
  const R38 = 6h26; // atemp[2]
  const R39 = 6h27; // atemp[3]
  
  const R40 = 6h28; // btemp[0]
  const R41 = 6h29; // btemp[1]
  const R42 = 6h2A; // btemp[2]
  const R43 = 6h2B; // btemp[3]
  const R44 = 6h2C; // i
  const R45 = 6h2D; // bulls
  const R46 = 6h2E; // cows
  const R47 = 6h2F;
  
  const R48 = 6h30;  //
  const R49 = 6h31;  //
  const R50 = 6h32;  //
  const R51 = 6h33;  //
  const R52 = 6h34;  // reserved for seven seg[0]
  const R53 = 6h35;  // reserved for seven seg[1]
  const R54 = 6h36;  // reserved for seven seg[2]
  const R55 = 6h37;  // reserved for lives output
  
  const R56 = 6h38;  // reserved for button buffer
  const R57 = 6h39;  // reserved for seven segment pointer
  const R58 = 6h3A;  // current page number
  const R59 = 6h3B;  // XP for page number
  const R60 = 6h3C;  // XP for page offset
  const R61 = 6h3D;  // LP for page number
  const R62 = 6h3E;  // LP for page offset
  const R63 = 6h3F;  // set to zero; not to be changed
  
  const BTB = R56;   // alias for R56
  const SSP = R57;   // alias for R57
  const CPP = R58;   // alias for R58
  const XP1 = R59;   // alias for R59
  const XP2 = R60;   // alias for R60
  const LP1 = R61;   // alias for R61
  const LP2 = R62;   // alias for R62
}

module regfile (
    input clk,        // clock
    input rst,        // reset
    input button[8],  // button input
    input ra1[6],     // read address 1
    input ra2[6],     // read address 2
    input wa[6],      // write address 1
    output rd1[8],    // read data 1
    output rd2[8],    // read data 2
    input wd[8],      // write data 1
    input we,         // write enable 1
    output z          // z = (rd1 == 0) ? 1 : 0
  ) {
  
  .clk(clk), .rst(rst) {
    dff regs[64][8];   // CPU Registers
  }

  always {
    rd1 = regs.q[ra1];
    rd2 = regs.q[ra2];
    z = 1;
    regs.d[Reg.BTB] = button;
    
    if (we == 1 && wa != Reg.R63) {
      regs.d[wa] = wd;
    } 
    if (regs.q[ra1] != 0) {
      z = 0;
    }
  }
}
