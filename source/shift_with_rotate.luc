module shift_with_rotate (
    input a[8], //
    input b[3],
    input alufn[4],
    input cin,
    output out[8],
    output cout
  ) {

  sig c[8];
  sig xb[3];
  var i;
  
  // submodules to carry out shift and rotate operations
  shift8 shifter(.a(a), .b(b), .alufn(alufn[1:0]));
  adder adder(.a(shifter.shift), .b(c), .alufn(0));
  // rotate left alufn 100100
  // rotate right alufn 100101
  // rotate left with carry alufn 101100
  // rotate right with carry alufn 101101
  
  always {
    
    // set shift to 1 bit for rotate operations
    /*if (alufn[2] == 1) {
      xb = 1;
    } else {
      xb = b;
    }*/
    
    // output for shifter and rotater
    out = adder.sum;
    
    // selectors for rotate operations
    // rotate left
    if (alufn == 4h4) {
      c = 0;
      for (i = 0; i < b; i++) {
        c[i] = a[7-i];
      }
       /* c[0] = a[7];
        c[7:1] = 0; */
    } 
    // rotate right
    else if (alufn == 4h5) {
      c = 0;
      for (i = 0; i < b; i++) {
        c[7-i] = a[i];
      }
      /* c[7] = a[0];
      c[6:0] = 0; */
    } 
    // rotate left with carry
    else if (alufn == 4hc) {
      cout = a[7];
      c[0] = cin;
      c[7:1] = 0;
    } 
    // rotate right with carry  
    else if (alufn == 4hd) {
      c[7] = cin;
      c[6:0] = 0;
      cout = a[0];
    } 
    // output for regular shift operations  
    else {
      c = 0;
      cout = 0;
    }
  }
}
